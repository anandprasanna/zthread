#!/usr/bin/env python2
# Potential profile calculator
# Written by Arjun Srinivasan

from numpy import zeros

POTENTIAL_DICT_FILE = "potential_1417.out"
TO_ONE_LETTER_CODE={'ALA':'A', 'VAL':'V', 'PHE':'F', 'PRO':'P', 'MET':'M','ILE':'I', 'LEU':'L', 'ASP':'D', 'GLU':'E', 'LYS':'K','ARG':'R', 'SER':'S', 'THR':'T', 'TYR':'Y', 'HIS':'H','CYS':'C', 'ASN':'N', 'GLN':'Q', 'TRP':'W', 'GLY':'G', '---':'-', 'XXX':'X'}
TOLC = TO_ONE_LETTER_CODE
T3LC = {y:x for x,y in TOLC.items()}
T3LC["B"] = "ASP"

def generate_potential_dictionary():
    """ Generate the potential dictionary for four-body potentials based on previous data. """
    with open(POTENTIAL_DICT_FILE, 'r') as f:
        return {x.split()[0] : float(x.split()[1]) for x in f}

POTENTIAL_DICT = generate_potential_dictionary()

def simplex_potential(reslist):
    """ Calculates the potential of each simplex.

    Arguments:
    reslist -- List of Delaunay triangulation vertices containing residues.
    """
    res_strings = [''.join([TOLC[y] for y in x]) for x in reslist]
    return [(x, POTENTIAL_DICT[''.join(sorted(x))]) for x in res_strings]

def residue_potential(num_atoms, vertices, simplexlist):
    """ Calculates the potential of each residue (based on surrounding simplices)

    Arguments:
    num_atoms -- Number of atom objects.
    vertices -- Numbered Delaunay triangulation vertices.
    simplexlist -- List generated by simplex_potential.
    """
    res_pots = zeros(num_atoms)
    for x,y in zip(vertices, simplexlist):
        for e in x:
            res_pots[e] += y[1]
    return res_pots
